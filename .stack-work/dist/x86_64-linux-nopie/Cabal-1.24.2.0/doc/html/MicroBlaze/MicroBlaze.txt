-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Short description of your package
--   
--   Please see the README on Github at
--   <a>https://github.com/githubuser/MicroBlaze#readme</a>
@package MicroBlaze
@version 0.1.0.0

module MBWord
newtype MBWord
MBWord :: Word32 -> MBWord
newtype CarryBit
CarryBit :: Bool -> CarryBit
add :: MBWord -> MBWord -> CarryBit -> MBWord
w1 :: MBWord
w2 :: MBWord
instance GHC.Show.Show MBWord.MBWord

module Boilerplate

-- | Standard Bit Datatype Supporting functions can be found in
--   Boilerplate.Bit
data Bit
C :: Bit
S :: Bit

-- | Standard Byte defintion Supporting functions can be found in
--   Boilerplate.W8
data W8
W8 :: Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> W8
data W16
W16 :: Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> W16
data W32
W32 :: W8 -> W8 -> W8 -> W8 -> W32
data W5
W5 :: Bit -> Bit -> Bit -> Bit -> Bit -> W5
data W6
W6 :: Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> W6
data W11
W11 :: Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> W11
data W26
W26 :: Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> W26
instance GHC.Show.Show Boilerplate.W26
instance GHC.Show.Show Boilerplate.W11
instance GHC.Show.Show Boilerplate.W6
instance GHC.Show.Show Boilerplate.W5
instance GHC.Show.Show Boilerplate.W32
instance GHC.Show.Show Boilerplate.W16
instance GHC.Show.Show Boilerplate.W8
instance GHC.Show.Show Boilerplate.Bit

module Boilerplate.Bit

-- | bit negation <tt> not S = C not C = S </tt>
not :: Bit -> Bit
(==) :: Bit -> Bit -> Bit
and :: Bit -> Bit -> Bit
or :: Bit -> Bit -> Bit
xor :: Bit -> Bit -> Bit
plus :: Bit -> Bit -> Bit -> (Bit, Bit)
minus :: Bit -> Bit -> Bit -> (Bit, Bit)

module Boilerplate.W8
zero :: W8
one :: W8
not :: W8 -> W8
and :: W8 -> W8 -> W8
or :: W8 -> W8 -> W8
xor :: W8 -> W8 -> W8
(==) :: W8 -> W8 -> Bit
rotateLeft :: W8 -> W8
rotateRight :: W8 -> W8
shiftLeft :: W8 -> Bit -> (Bit, W8)
shiftRight :: W8 -> Bit -> (Bit, W8)
add :: W8 -> W8 -> Bit -> (Bit, W8)
subtract :: W8 -> W8 -> Bit -> (Bit, W8)
negative :: W8 -> W8
isNegative :: W8 -> Bit
mostSignificantBit :: W8 -> Bit
leastSignificantBit :: W8 -> Bit

module Boilerplate.W32
zero :: W32
one :: W32
add :: W32 -> W32 -> Bit -> (Bit, W32)
and :: W32 -> W32 -> W32
or :: W32 -> W32 -> W32
not :: W32 -> W32
signExtendW16 :: W16 -> W32
unsignedExtendW16 :: W16 -> W32
signExtendW8 :: W8 -> W32
unsignedExtendW8 :: W8 -> W32
backExtendW16 :: W16 -> W32
(==) :: W32 -> W32 -> Bit
subtract :: W32 -> W32 -> Bit -> (Bit, W32)
signedCompare :: W32 -> W32 -> W32
unsignedCompare :: W32 -> W32 -> W32
isNegative :: W32 -> Bit
isPositive :: W32 -> Bit
isZero :: W32 -> Bit
greaterThanZero :: W32 -> Bit
lessThanOrEqualToZero :: W32 -> Bit

module InsSet
type Label = String
data MBVal
Byte :: Int8 -> MBVal
HalfWord :: Int16 -> MBVal
Word :: Int32 -> MBVal
Label :: Label -> MBVal
zerow :: MBVal
onew :: MBVal
data MBSize
ByteSize :: MBSize
HalfWordSize :: MBSize
WordSize :: MBSize
data MBReg

-- | Dedicated, Value 0
R0 :: MBReg

-- | Dedicated, Stack Pointer
R1 :: MBReg

-- | Dedicated, Read-only small data area anchor
R2 :: MBReg

-- | Volatile, Return Value
R3 :: MBReg

-- | Volatile, Return Value
R4 :: MBReg

-- | Volatile, Passing Parameter / Temporary
R5 :: MBReg

-- | Volatile, Passing Parameter / Temporary
R6 :: MBReg

-- | Volatile, Passing Parameter / Temporary
R7 :: MBReg

-- | Volatile, Passing Parameter / Temporary
R8 :: MBReg

-- | Volatile, Passing Parameter / Temporary
R9 :: MBReg

-- | Volatile, Passing Parameter / Temporary
R10 :: MBReg

-- | Volatile, Temporary
R11 :: MBReg

-- | Volatile, Temporary
R12 :: MBReg

-- | Dedicated, Read-write small data area anchor
R13 :: MBReg

-- | Dedicated, Return address for Interrupt
R14 :: MBReg

-- | Dedicated, Return address for Sub-routine
R15 :: MBReg

-- | Dedicated, Return address for Trap (Debugger)
R16 :: MBReg

-- | Dedicated, Return address for Exceptions
R17 :: MBReg

-- | Dedicated, Reserved for assembler, used for Imm instruction
R18 :: MBReg

-- | Non-volatile, must be saved across function calls
R19 :: MBReg

-- | Non-volatile, must be saved across function calls
R20 :: MBReg

-- | Non-volatile, must be saved across function calls
R21 :: MBReg

-- | Non-volatile, must be saved across function calls
R22 :: MBReg

-- | Non-volatile, must be saved across function calls
R23 :: MBReg

-- | Non-volatile, must be saved across function calls
R24 :: MBReg

-- | Non-volatile, must be saved across function calls
R25 :: MBReg

-- | Non-volatile, must be saved across function calls
R26 :: MBReg

-- | Non-volatile, must be saved across function calls
R27 :: MBReg

-- | Non-volatile, must be saved across function calls
R28 :: MBReg

-- | Non-volatile, must be saved across function calls
R29 :: MBReg

-- | Non-volatile, must be saved across function calls
R30 :: MBReg

-- | Non-volatile, must be saved across function calls
R31 :: MBReg
data MBSReg
RPC :: MBSReg
MSR :: MBSReg
data Ins
Add :: MBReg -> MBReg -> MBReg -> Ins
Addc :: MBReg -> MBReg -> MBReg -> Ins
Addk :: MBReg -> MBReg -> MBReg -> Ins
Addkc :: MBReg -> MBReg -> MBReg -> Ins
Addi :: MBReg -> MBReg -> W16 -> Ins
Addic :: MBReg -> MBReg -> W16 -> Ins
Addik :: MBReg -> MBReg -> W16 -> Ins
Addikc :: MBReg -> MBReg -> W16 -> Ins
And :: MBReg -> MBReg -> MBReg -> Ins
Andi :: MBReg -> MBReg -> W16 -> Ins
Andn :: MBReg -> MBReg -> MBReg -> Ins
Andni :: MBReg -> MBReg -> W16 -> Ins
Beq :: MBReg -> MBReg -> W11 -> Ins
Beqd :: MBReg -> MBReg -> W11 -> Ins
Beqi :: MBReg -> W16 -> Ins
Beqid :: MBReg -> W16 -> Ins
Bge :: MBReg -> MBReg -> W11 -> Ins
Bged :: MBReg -> MBReg -> W11 -> Ins
Bgei :: MBReg -> W16 -> Ins
Bgeid :: MBReg -> W16 -> Ins
Bgt :: MBReg -> MBReg -> W11 -> Ins
Bgtd :: MBReg -> MBReg -> W11 -> Ins
Bgti :: MBReg -> W16 -> Ins
Bgtid :: MBReg -> W16 -> Ins
Ble :: MBReg -> MBReg -> W11 -> Ins
Bled :: MBReg -> MBReg -> W11 -> Ins
Blei :: MBReg -> W16 -> Ins
Bleid :: MBReg -> W16 -> Ins
Blt :: MBReg -> MBReg -> W11 -> Ins
Bltd :: MBReg -> MBReg -> W11 -> Ins
Blti :: MBReg -> W16 -> Ins
Bltid :: MBReg -> W16 -> Ins
Bne :: MBReg -> MBReg -> W11 -> Ins
Bned :: MBReg -> MBReg -> W11 -> Ins
Bnei :: MBReg -> W16 -> Ins
Bneid :: MBReg -> W16 -> Ins
Br :: MBReg -> Ins
Bra :: MBReg -> Ins
Brd :: MBReg -> Ins
Brad :: MBReg -> Ins
Brld :: MBReg -> MBReg -> Ins
Brald :: MBReg -> MBReg -> Ins
Bri :: W16 -> Ins
Brai :: W16 -> Ins
Brid :: W16 -> Ins
Braid :: W16 -> Ins
Brlid :: MBReg -> W16 -> Ins
Bralid :: MBReg -> W16 -> Ins
Brk :: MBReg -> MBReg -> Ins
Brki :: MBReg -> W16 -> Ins
Bsrl :: MBReg -> MBReg -> MBReg -> Ins
Bsra :: MBReg -> MBReg -> MBReg -> Ins
Bsll :: MBReg -> MBReg -> MBReg -> Ins
Bsrli :: MBReg -> MBReg -> W16 -> Ins
Bsrai :: MBReg -> MBReg -> W16 -> Ins
Bslli :: MBReg -> MBReg -> W16 -> Ins
Cmp :: MBReg -> MBReg -> MBReg -> Ins
Cmpu :: MBReg -> MBReg -> MBReg -> Ins
Get :: MBReg -> Int -> Ins
Nget :: MBReg -> Int -> Ins
Cget :: MBReg -> Int -> Ins
Ncget :: MBReg -> Int -> Ins
Idiv :: MBReg -> MBReg -> MBReg -> Ins
Idivu :: MBReg -> MBReg -> MBReg -> Ins
Imm :: W16 -> Ins
Lbu :: MBReg -> MBReg -> MBReg -> Ins
Lbui :: MBReg -> MBReg -> W16 -> Ins
Lhu :: MBReg -> MBReg -> MBReg -> Ins
Lhui :: MBReg -> MBReg -> W16 -> Ins
Lw :: MBReg -> MBReg -> MBReg -> Ins
Lwi :: MBReg -> MBReg -> W16 -> Ins
Mfs :: MBReg -> MBSReg -> Ins
Mts :: MBSReg -> MBReg -> Ins
Mul :: MBReg -> MBReg -> MBReg -> Ins
Mulhu :: MBReg -> MBReg -> MBReg -> Ins
Mulhsu :: MBReg -> MBReg -> MBReg -> Ins
Muli :: MBReg -> MBReg -> W16 -> Ins
Or :: MBReg -> MBReg -> MBReg -> Ins
Ori :: MBReg -> MBReg -> W16 -> Ins
Pcmpbf :: MBReg -> MBReg -> MBReg -> Ins
Pcmpne :: MBReg -> MBReg -> MBReg -> Ins
Put :: MBReg -> Int -> Ins
Putd :: MBReg -> MBReg -> Int -> Ins
Rsub :: MBReg -> MBReg -> MBReg -> Ins
Rsubc :: MBReg -> MBReg -> MBReg -> Ins
Rsubk :: MBReg -> MBReg -> MBReg -> Ins
Rsubkc :: MBReg -> MBReg -> MBReg -> Ins
Rsubi :: MBReg -> MBReg -> W16 -> Ins
Rsubic :: MBReg -> MBReg -> W16 -> Ins
Rsubik :: MBReg -> MBReg -> W16 -> Ins
Rsubikc :: MBReg -> MBReg -> W16 -> Ins
Rtbd :: MBReg -> W16 -> Ins
Rtid :: MBReg -> W16 -> Ins
Rted :: MBReg -> W16 -> Ins
Rtsd :: MBReg -> W16 -> Ins
Sb :: MBReg -> MBReg -> MBReg -> Ins
Sbi :: MBReg -> MBReg -> W16 -> Ins
Sext16 :: MBReg -> MBReg -> Ins
Sh :: MBReg -> MBReg -> MBReg -> Ins
Shi :: MBReg -> MBReg -> W16 -> Ins
Sra :: MBReg -> MBReg -> Ins
Src :: MBReg -> MBReg -> Ins
Sw :: MBReg -> MBReg -> MBReg -> Ins
Swi :: MBReg -> MBReg -> W16 -> Ins
Wdc :: MBReg -> MBReg -> Ins
Wic :: MBReg -> MBReg -> Ins
Xor :: MBReg -> MBReg -> MBReg -> Ins
Xori :: MBReg -> MBReg -> W16 -> Ins
instance GHC.Show.Show InsSet.Ins
instance GHC.Show.Show InsSet.MBSReg
instance GHC.Enum.Enum InsSet.MBReg
instance GHC.Show.Show InsSet.MBReg
instance GHC.Show.Show InsSet.MBSize
instance GHC.Show.Show InsSet.MBVal

module MachineState.MachineStatusRegister

-- | the machine status register
data RMSR
RMSR :: Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> RMSR
emptyRMSR :: RMSR
data MachineStatusBit
CarryCopy :: MachineStatusBit
DataCacheEnable :: MachineStatusBit
DivisionByZero :: MachineStatusBit
InstructionCacheEnable :: MachineStatusBit
FSLError :: MachineStatusBit
BreakInProgress :: MachineStatusBit
Carry :: MachineStatusBit
InterruptEnable :: MachineStatusBit
BuslockEnable :: MachineStatusBit
DelayEnable :: MachineStatusBit
getStatus :: MachineStatusBit -> RMSR -> Bit

-- | sets the machine status bit indicated to the desired boolean value
setStatus :: MachineStatusBit -> Bit -> RMSR -> RMSR

-- | gets the status register in the form of a 32-bit word
getMSRWord :: RMSR -> W32
setMSRWord :: W32 -> RMSR

module MachineState

-- | Full MicroBlaze Register Profile
data MicroBlaze
MicroBlaze :: MBRegisters -> RPC -> RMSR -> MicroBlaze

-- | Standard word size for MicroBlaze
type MBWord = W32
newMicroBlaze :: MicroBlaze

-- | Program Counter
type RPC = MBWord
getRPC :: State MicroBlaze MBWord
setRPC :: MBWord -> State MicroBlaze ()
setMSRBit :: MachineStatusBit -> Bit -> State MicroBlaze ()
getMSRBit :: MachineStatusBit -> State MicroBlaze Bit
pullMSR :: State MicroBlaze W32
pushMSR :: W32 -> State MicroBlaze ()

-- | The register store for the Microblaze
data MBRegisters
emptyRegisters :: MBRegisters
getRegister :: MBReg -> State MicroBlaze MBWord
setRegister :: MBReg -> MBWord -> State MicroBlaze ()
type Address = W32
loadWord :: W32 -> State MicroBlaze W32
loadHalfWord :: W32 -> State MicroBlaze W16
loadByte :: W32 -> State MicroBlaze W8

module Interpreter
type Op = W32 -> W32 -> W32
execTypeA :: Op -> MBReg -> MBReg -> MBReg -> State MicroBlaze ()
execTypeB :: Op -> MBReg -> MBReg -> W16 -> State MicroBlaze ()

-- | note that all exec does is process the given instructions as it can
--   given the machine state information. Delays and other temporal actions
--   must be handled at a different level of the program
exec :: Ins -> State MicroBlaze ()
type CarryFlag = Bool
type KeepFlag = Bool
type DelayFlag = Bool
data BranchInput
TypeA :: MBReg -> MBReg -> BranchInput
TypeB :: MBReg -> W16 -> BranchInput
data AbsoluteBranchInput
AbsR :: MBReg -> AbsoluteBranchInput
AbsI :: W16 -> AbsoluteBranchInput
link :: MBReg -> State MicroBlaze ()
delay :: State MicroBlaze ()
getBranchInputValue :: BranchInput -> State MicroBlaze W32
getBranchRegisterA :: BranchInput -> State MicroBlaze W32
absoluteBranch :: AbsoluteBranchInput -> State MicroBlaze ()
branch :: BranchInput -> (MBWord -> Bit) -> State MicroBlaze ()
add :: CarryFlag -> KeepFlag -> (MBReg, Either MBReg W16) -> MBReg -> State MicroBlaze ()
data LoadSize
LWord :: LoadSize
LHalfWord :: (W16 -> W32) -> LoadSize
LByte :: (W8 -> W32) -> LoadSize
data ImmOrReg
Register :: MBReg -> ImmOrReg
Immediate :: W16 -> ImmOrReg
load :: LoadSize -> MBReg -> MBReg -> ImmOrReg -> State MicroBlaze ()
moveFromSRegister :: MBReg -> MBSReg -> State MicroBlaze ()
moveToSRegister :: MBSReg -> MBReg -> State MicroBlaze ()

module TestData
quickTest :: State MicroBlaze W32
