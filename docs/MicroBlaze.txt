-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Short description of your package
--   
--   Please see the README on Github at
--   <a>https://github.com/githubuser/MicroBlaze#readme</a>
@package MicroBlaze
@version 0.1.0.0


module Boilerplate

-- | Standard Bit Datatype Supporting functions can be found in
--   <a>Boilerplate.Bit</a>
data Bit
C :: Bit
S :: Bit

-- | show instance of Bit displays bits as 1 and 0

-- | Standard Byte defintion Supporting functions can be found in
--   <a>Boilerplate.W8</a>
data W8
W8 :: Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> W8

-- | 16-bit data
data W16
W16 :: Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> W16

-- | 32-bit data Supporting functions can be found in
--   <a>Boilerplate.W32</a>
data W32
W32 :: W8 -> W8 -> W8 -> W8 -> W32

-- | 5-bit data
data W5
W5 :: Bit -> Bit -> Bit -> Bit -> Bit -> W5

-- | 6-bit data
data W6
W6 :: Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> W6

-- | 11-bit data
data W11
W11 :: Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> W11

-- | 26-bit data
data W26
W26 :: Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> W26
instance GHC.Show.Show Boilerplate.W26
instance GHC.Show.Show Boilerplate.W11
instance GHC.Show.Show Boilerplate.W6
instance GHC.Show.Show Boilerplate.W5
instance GHC.Show.Show Boilerplate.W32
instance GHC.Show.Show Boilerplate.W16
instance GHC.Show.Show Boilerplate.W8
instance GHC.Show.Show Boilerplate.Bit


module Boilerplate.Bit

-- | bit negation <tt> not S = C not C = S </tt>
not :: Bit -> Bit

-- | equality
(==) :: Bit -> Bit -> Bit

-- | logical AND
and :: Bit -> Bit -> Bit

-- | logical OR
or :: Bit -> Bit -> Bit

-- | logical exclusive OR
xor :: Bit -> Bit -> Bit

-- | Binary additon with carries
plus :: Bit -> Bit -> Bit -> (Bit, Bit)

-- | Binary subtraction with carries
minus :: Bit -> Bit -> Bit -> (Bit, Bit)


module Boilerplate.W8

-- | zero-byte (00000000)
zero :: W8

-- | one-byte (00000001)
one :: W8

-- | logical not
not :: W8 -> W8

-- | logical and
and :: W8 -> W8 -> W8

-- | logical or
or :: W8 -> W8 -> W8

-- | logical exclusive or
xor :: W8 -> W8 -> W8

-- | logical equality (as opposed to bitwise)
(==) :: W8 -> W8 -> Bit

-- | left rotation
rotateLeft :: W8 -> W8

-- | right rotation
rotateRight :: W8 -> W8

-- | left shift with carry
shiftLeft :: W8 -> Bit -> (Bit, W8)

-- | right shift with carry
shiftRight :: W8 -> Bit -> (Bit, W8)

-- | most significant bit of byte
--   
--   also is the sign-bit
mostSignificantBit :: W8 -> Bit

-- | least significant bit of byte
leastSignificantBit :: W8 -> Bit

-- | addition with carry
add :: W8 -> W8 -> Bit -> (Bit, W8)

-- | subtraction with carry
subtract :: W8 -> W8 -> Bit -> (Bit, W8)

-- | two's complement negation
negative :: W8 -> W8

-- | tests negativity
isNegative :: W8 -> Bit
arithmeticShiftRight :: W8 -> Bit -> (Bit, W8)
logicalShiftRight :: W8 -> (Bit, W8)


module Boilerplate.W32

-- | zero value (00000000 00000000 00000000 00000000)
zero :: W32

-- | one value (00000000 00000000 00000000 00000001)
one :: W32

-- | Logical AND
and :: W32 -> W32 -> W32

-- | Logical OR
or :: W32 -> W32 -> W32

-- | Logical NOT
not :: W32 -> W32

-- | equality
(==) :: W32 -> W32 -> Bit
xor :: W32 -> W32 -> W32

-- | two's complement 16-bit sign extension
signExtendW16 :: W16 -> W32

-- | unsigned 16-bit extension
unsignedExtendW16 :: W16 -> W32

-- | two's complement byte sign extension
signExtendW8 :: W8 -> W32

-- | unsigned byte extension
unsignedExtendW8 :: W8 -> W32

-- | back-extends 16-bit data (useful for certain register operations)
--   
--   example : 1010 0011 -&gt; 1010 0011 0000 0000
backExtendW16 :: W16 -> W32

-- | the least significant byte
leastSignificantByte :: W32 -> W8

-- | the least significat hald-word
leastSignificantHalfWord :: W32 -> W16

-- | addition with carries
add :: W32 -> W32 -> Bit -> (Bit, W32)

-- | subtraction with carries
subtract :: W32 -> W32 -> Bit -> (Bit, W32)

-- | subtraction-based comparison with sign-preservation
signedCompare :: W32 -> W32 -> W32

-- | unsigned subtraction comparison
unsignedCompare :: W32 -> W32 -> W32

-- | test if value is negative under two's complement
isNegative :: W32 -> Bit

-- | test if a value is positive or zero under two's complement
isPositive :: W32 -> Bit

-- | test if a value is zero
isZero :: W32 -> Bit

-- | test if a value is greater than zero under two's complement
greaterThanZero :: W32 -> Bit

-- | test if a value is less than or equal to zero under two's complement
lessThanOrEqualToZero :: W32 -> Bit

-- | reverse subtraction
--   
--   rb + not(ra) + carry
reverseSubtraction :: W32 -> W32 -> Bit -> (Bit, W32)
arithmeticShiftRight :: W32 -> Bit -> (Bit, W32)
logicalShiftRight :: W32 -> (Bit, W32)


module InsSet

-- | Possible data sizes
data MBSize
ByteSize :: MBSize
HalfWordSize :: MBSize
WordSize :: MBSize

-- | All user-accesible general-purpose registers
data MBReg

-- | Dedicated, Value 0
R0 :: MBReg

-- | Dedicated, Stack Pointer
R1 :: MBReg

-- | Dedicated, Read-only small data area anchor
R2 :: MBReg

-- | Volatile, Return Value
R3 :: MBReg

-- | Volatile, Return Value
R4 :: MBReg

-- | Volatile, Passing Parameter / Temporary
R5 :: MBReg

-- | Volatile, Passing Parameter / Temporary
R6 :: MBReg

-- | Volatile, Passing Parameter / Temporary
R7 :: MBReg

-- | Volatile, Passing Parameter / Temporary
R8 :: MBReg

-- | Volatile, Passing Parameter / Temporary
R9 :: MBReg

-- | Volatile, Passing Parameter / Temporary
R10 :: MBReg

-- | Volatile, Temporary
R11 :: MBReg

-- | Volatile, Temporary
R12 :: MBReg

-- | Dedicated, Read-write small data area anchor
R13 :: MBReg

-- | Dedicated, Return address for Interrupt
R14 :: MBReg

-- | Dedicated, Return address for Sub-routine
R15 :: MBReg

-- | Dedicated, Return address for Trap (Debugger)
R16 :: MBReg

-- | Dedicated, Return address for Exceptions
R17 :: MBReg

-- | Dedicated, Reserved for assembler, used for Imm instruction
R18 :: MBReg

-- | Non-volatile, must be saved across function calls
R19 :: MBReg

-- | Non-volatile, must be saved across function calls
R20 :: MBReg

-- | Non-volatile, must be saved across function calls
R21 :: MBReg

-- | Non-volatile, must be saved across function calls
R22 :: MBReg

-- | Non-volatile, must be saved across function calls
R23 :: MBReg

-- | Non-volatile, must be saved across function calls
R24 :: MBReg

-- | Non-volatile, must be saved across function calls
R25 :: MBReg

-- | Non-volatile, must be saved across function calls
R26 :: MBReg

-- | Non-volatile, must be saved across function calls
R27 :: MBReg

-- | Non-volatile, must be saved across function calls
R28 :: MBReg

-- | Non-volatile, must be saved across function calls
R29 :: MBReg

-- | Non-volatile, must be saved across function calls
R30 :: MBReg

-- | Non-volatile, must be saved across function calls
R31 :: MBReg

-- | Special Purpose Registers
data MBSReg

-- | Program Counter
RPC :: MBSReg

-- | Machine Status Register
MSR :: MBSReg

-- | The MicroBlaze Instruction Set
data Ins
Add :: MBReg -> MBReg -> MBReg -> Ins
Addc :: MBReg -> MBReg -> MBReg -> Ins
Addk :: MBReg -> MBReg -> MBReg -> Ins
Addkc :: MBReg -> MBReg -> MBReg -> Ins
Addi :: MBReg -> MBReg -> W16 -> Ins
Addic :: MBReg -> MBReg -> W16 -> Ins
Addik :: MBReg -> MBReg -> W16 -> Ins
Addikc :: MBReg -> MBReg -> W16 -> Ins
And :: MBReg -> MBReg -> MBReg -> Ins
Andi :: MBReg -> MBReg -> W16 -> Ins
Andn :: MBReg -> MBReg -> MBReg -> Ins
Andni :: MBReg -> MBReg -> W16 -> Ins
Beq :: MBReg -> MBReg -> W11 -> Ins
Beqd :: MBReg -> MBReg -> W11 -> Ins
Beqi :: MBReg -> W16 -> Ins
Beqid :: MBReg -> W16 -> Ins
Bge :: MBReg -> MBReg -> W11 -> Ins
Bged :: MBReg -> MBReg -> W11 -> Ins
Bgei :: MBReg -> W16 -> Ins
Bgeid :: MBReg -> W16 -> Ins
Bgt :: MBReg -> MBReg -> W11 -> Ins
Bgtd :: MBReg -> MBReg -> W11 -> Ins
Bgti :: MBReg -> W16 -> Ins
Bgtid :: MBReg -> W16 -> Ins
Ble :: MBReg -> MBReg -> W11 -> Ins
Bled :: MBReg -> MBReg -> W11 -> Ins
Blei :: MBReg -> W16 -> Ins
Bleid :: MBReg -> W16 -> Ins
Blt :: MBReg -> MBReg -> W11 -> Ins
Bltd :: MBReg -> MBReg -> W11 -> Ins
Blti :: MBReg -> W16 -> Ins
Bltid :: MBReg -> W16 -> Ins
Bne :: MBReg -> MBReg -> W11 -> Ins
Bned :: MBReg -> MBReg -> W11 -> Ins
Bnei :: MBReg -> W16 -> Ins
Bneid :: MBReg -> W16 -> Ins
Br :: MBReg -> Ins
Bra :: MBReg -> Ins
Brd :: MBReg -> Ins
Brad :: MBReg -> Ins
Brld :: MBReg -> MBReg -> Ins
Brald :: MBReg -> MBReg -> Ins
Bri :: W16 -> Ins
Brai :: W16 -> Ins
Brid :: W16 -> Ins
Braid :: W16 -> Ins
Brlid :: MBReg -> W16 -> Ins
Bralid :: MBReg -> W16 -> Ins
Brk :: MBReg -> MBReg -> Ins
Brki :: MBReg -> W16 -> Ins
Bsrl :: MBReg -> MBReg -> MBReg -> Ins
Bsra :: MBReg -> MBReg -> MBReg -> Ins
Bsll :: MBReg -> MBReg -> MBReg -> Ins
Bsrli :: MBReg -> MBReg -> W16 -> Ins
Bsrai :: MBReg -> MBReg -> W16 -> Ins
Bslli :: MBReg -> MBReg -> W16 -> Ins
Cmp :: MBReg -> MBReg -> MBReg -> Ins
Cmpu :: MBReg -> MBReg -> MBReg -> Ins
Get :: MBReg -> Int -> Ins
Nget :: MBReg -> Int -> Ins
Cget :: MBReg -> Int -> Ins
Ncget :: MBReg -> Int -> Ins
Idiv :: MBReg -> MBReg -> MBReg -> Ins
Idivu :: MBReg -> MBReg -> MBReg -> Ins
Imm :: W16 -> Ins
Lbu :: MBReg -> MBReg -> MBReg -> Ins
Lbui :: MBReg -> MBReg -> W16 -> Ins
Lhu :: MBReg -> MBReg -> MBReg -> Ins
Lhui :: MBReg -> MBReg -> W16 -> Ins
Lw :: MBReg -> MBReg -> MBReg -> Ins
Lwi :: MBReg -> MBReg -> W16 -> Ins
Mfs :: MBReg -> MBSReg -> Ins
Mts :: MBSReg -> MBReg -> Ins
Mul :: MBReg -> MBReg -> MBReg -> Ins
Mulhu :: MBReg -> MBReg -> MBReg -> Ins
Mulhsu :: MBReg -> MBReg -> MBReg -> Ins
Muli :: MBReg -> MBReg -> W16 -> Ins
Or :: MBReg -> MBReg -> MBReg -> Ins
Ori :: MBReg -> MBReg -> W16 -> Ins
Pcmpbf :: MBReg -> MBReg -> MBReg -> Ins
Pcmpne :: MBReg -> MBReg -> MBReg -> Ins
Put :: MBReg -> Int -> Ins
Nput :: MBReg -> Int -> Ins
Cput :: MBReg -> Int -> Ins
Ncput :: MBReg -> Int -> Ins
Rsub :: MBReg -> MBReg -> MBReg -> Ins
Rsubc :: MBReg -> MBReg -> MBReg -> Ins
Rsubk :: MBReg -> MBReg -> MBReg -> Ins
Rsubkc :: MBReg -> MBReg -> MBReg -> Ins
Rsubi :: MBReg -> MBReg -> W16 -> Ins
Rsubic :: MBReg -> MBReg -> W16 -> Ins
Rsubik :: MBReg -> MBReg -> W16 -> Ins
Rsubikc :: MBReg -> MBReg -> W16 -> Ins
Rtbd :: MBReg -> W16 -> Ins
Rtid :: MBReg -> W16 -> Ins
Rted :: MBReg -> W16 -> Ins
Rtsd :: MBReg -> W16 -> Ins
Sb :: MBReg -> MBReg -> MBReg -> Ins
Sbi :: MBReg -> MBReg -> W16 -> Ins
Sext8 :: MBReg -> MBReg -> Ins
Sext16 :: MBReg -> MBReg -> Ins
Sh :: MBReg -> MBReg -> MBReg -> Ins
Shi :: MBReg -> MBReg -> W16 -> Ins
Sra :: MBReg -> MBReg -> Ins
Src :: MBReg -> MBReg -> Ins
Srl :: MBReg -> MBReg -> Ins
Sw :: MBReg -> MBReg -> MBReg -> Ins
Swi :: MBReg -> MBReg -> W16 -> Ins
Wdc :: MBReg -> MBReg -> Ins
Wic :: MBReg -> MBReg -> Ins
Xor :: MBReg -> MBReg -> MBReg -> Ins
Xori :: MBReg -> MBReg -> W16 -> Ins
instance GHC.Show.Show InsSet.Ins
instance GHC.Show.Show InsSet.MBSReg
instance GHC.Enum.Enum InsSet.MBReg
instance GHC.Show.Show InsSet.MBReg
instance GHC.Show.Show InsSet.MBSize


module MachineState.MachineStatusRegister

-- | the machine status register
data RMSR
RMSR :: Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> RMSR

-- | a zero-initialized (All False) MSR
emptyRMSR :: RMSR

-- | gets the status register in the form of a 32-bit word
getMSRWord :: RMSR -> W32

-- | sets the status register from a 32-bit MSR word
setMSRWord :: W32 -> RMSR

-- | Various status flags in the Machine State Register
data MachineStatusBit
CarryCopy :: MachineStatusBit
DataCacheEnable :: MachineStatusBit
DivisionByZero :: MachineStatusBit
InstructionCacheEnable :: MachineStatusBit
FSLError :: MachineStatusBit
BreakInProgress :: MachineStatusBit
Carry :: MachineStatusBit
InterruptEnable :: MachineStatusBit
BuslockEnable :: MachineStatusBit
DelayEnable :: MachineStatusBit

-- | Get the status of a specified flag
getStatus :: MachineStatusBit -> RMSR -> Bit

-- | sets the machine status bit indicated to the desired boolean value
setStatus :: MachineStatusBit -> Bit -> RMSR -> RMSR


module MachineState

-- | Full MicroBlaze Register Profile
data MicroBlaze
MicroBlaze :: MBRegisters -> RPC -> RMSR -> MicroBlaze

-- | Standard word size for MicroBlaze
type MBWord = W32

-- | Creates a zero-initialized MicroBlaze controller
newMicroBlaze :: MicroBlaze

-- | Program Counter
type RPC = MBWord

-- | Gets the RPC from a MicroBlaze State
getRPC :: State MicroBlaze MBWord

-- | Sets the RPC in a MicroBlaze State
setRPC :: MBWord -> State MicroBlaze ()

-- | Sets a specified bit on the machine status register
setMSRBit :: MachineStatusBit -> Bit -> State MicroBlaze ()

-- | Gets the value of a specified MSR Bit
getMSRBit :: MachineStatusBit -> State MicroBlaze Bit

-- | Pulls the enture Machine Status Register as a 32-bit Word
pullMSR :: State MicroBlaze W32

-- | Pushes an enture MSR as a 32-bit word
pushMSR :: W32 -> State MicroBlaze ()

-- | The register store for the Microblaze
data MBRegisters

-- | zero-initialized register bank
emptyRegisters :: MBRegisters

-- | gets the value at a specified register
getRegister :: MBReg -> State MicroBlaze MBWord

-- | sets the value at a specified register
setRegister :: MBReg -> MBWord -> State MicroBlaze ()

-- | A 32-bit word memory address
type Address = W32

-- | loads a 32-bit word from memory
--   
--   <b>NOT YET IMPLEMENTED</b>
loadWord :: W32 -> State MicroBlaze W32

-- | loads a 16-bit half-word from memory
--   
--   <b>NOT YET IMPLEMENTED</b>
loadHalfWord :: W32 -> State MicroBlaze W16

-- | loads a byte from memory
--   
--   <b>NOT YET IMPLEMENTED</b>
loadByte :: W32 -> State MicroBlaze W8

-- | stores a 32-bit word in memory
--   
--   <b>NOT YET IMPLEMENTED</b>
storeWord :: W32 -> W32 -> W32 -> State MicroBlaze ()

-- | stores a 16-bit half-word in memory
--   
--   <b>NOT YET IMPLEMENTED</b>
storeHalfWord :: W16 -> W32 -> W32 -> State MicroBlaze ()

-- | stores a 8-bit byte in memory
--   
--   <b>NOT YET IMPLEMENTED</b>
storeByte :: W8 -> W32 -> W32 -> State MicroBlaze ()


module Interpreter

-- | note that all exec does is process the given instructions as it can
--   given the machine state information. Delays and other temporal actions
--   must be handled at a different level of the program
exec :: Ins -> State MicroBlaze ()

-- | Delay Flag for Branching
type DelayFlag = Bool

-- | Branch Input Type
data BranchInput
TypeA :: MBReg -> MBReg -> BranchInput
TypeB :: MBReg -> W16 -> BranchInput

-- | Absolute Branch Input Type
data AbsoluteBranchInput
AbsR :: MBReg -> AbsoluteBranchInput
AbsI :: W16 -> AbsoluteBranchInput

-- | W32 Isomorphism type
type Op = W32 -> W32 -> W32

-- | execute a type a instruction using basic operators
execTypeA :: Op -> MBReg -> MBReg -> MBReg -> State MicroBlaze ()

-- | execute a type b instruction using basic operators
execTypeB :: Op -> MBReg -> MBReg -> W16 -> State MicroBlaze ()

-- | SHOULD BE DEPRECATED
getBranchInputValue :: BranchInput -> State MicroBlaze W32

-- | SHOULD BE DEPRECATED
getBranchRegisterA :: BranchInput -> State MicroBlaze W32

-- | branch to an absolute address
absoluteBranch :: AbsoluteBranchInput -> State MicroBlaze ()

-- | branch to a relative address
branch :: BranchInput -> (MBWord -> Bit) -> State MicroBlaze ()

-- | adding mechanism for MicroBlaze (likely can be deprecated)
add :: CarryFlag -> KeepFlag -> (MBReg, Either MBReg W16) -> MBReg -> State MicroBlaze ()

-- | hardware subtraction (likely can be deprecated)
sub :: CarryFlag -> KeepFlag -> (MBReg, Either MBReg W16) -> MBReg -> State MicroBlaze ()

-- | Carry Flag for adder
type CarryFlag = Bool

-- | Keep Flag for adder
type KeepFlag = Bool

-- | size of load operation, include sign-extension function of appropriate
--   size
data LoadSize
LWord :: LoadSize
LHalfWord :: (W16 -> W32) -> LoadSize
LByte :: (W8 -> W32) -> LoadSize

-- | Either-like datatype to differentiate TypeA and TypeB data
data ImmOrReg
Register :: MBReg -> ImmOrReg
Immediate :: W16 -> ImmOrReg

-- | Loads data from memory, The two register offsets are added to obtain
--   an address
load :: LoadSize -> MBReg -> MBReg -> ImmOrReg -> State MicroBlaze ()
data StoreSize
SWord :: StoreSize
SHalfWord :: StoreSize
SByte :: StoreSize
store :: StoreSize -> MBReg -> MBReg -> ImmOrReg -> State MicroBlaze ()

-- | pulls either the MSR or PC register into given register
moveFromSRegister :: MBReg -> MBSReg -> State MicroBlaze ()

-- | puts a Word into a special purpose register. Does not support updates
--   to the program counter
moveToSRegister :: MBSReg -> MBReg -> State MicroBlaze ()

-- | links the current program counter value into the specified register
link :: MBReg -> State MicroBlaze ()

-- | sets the delay flag in the machine status register
delay :: State MicroBlaze ()

-- | returns the pc from a break, interrupt, or subroutine
returnFrom :: MBReg -> W16 -> State MicroBlaze ()
sext8 :: MBReg -> MBReg -> State MicroBlaze ()
sext16 :: MBReg -> MBReg -> State MicroBlaze ()
shiftRightArithmetic :: CarryFlag -> MBReg -> MBReg -> State MicroBlaze ()
shiftRightLogical :: MBReg -> MBReg -> State MicroBlaze ()


module TestData

-- | An addition test
quickTest :: State MicroBlaze W32
